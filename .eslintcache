[{"C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\App.js":"1","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\reportWebVitals.js":"2","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\HomeScreen.js":"3","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\index.js":"4","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\WhatWeOffer.js":"5","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\Charts.js":"6","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\Footer.js":"7","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\CryptoTable.js":"8"},{"size":123,"mtime":1610913905941,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1610598214348,"results":"11","hashOfConfig":"10"},{"size":1333,"mtime":1611286468435,"results":"12","hashOfConfig":"10"},{"size":546,"mtime":1610918916649,"results":"13","hashOfConfig":"10"},{"size":2672,"mtime":1611104035389,"results":"14","hashOfConfig":"10"},{"size":1177,"mtime":1611284594847,"results":"15","hashOfConfig":"10"},{"size":1635,"mtime":1611202044087,"results":"16","hashOfConfig":"10"},{"size":10025,"mtime":1611287657539,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13cr6s1",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\App.js",[],"C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\reportWebVitals.js",[],"C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\HomeScreen.js",["38"],"C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\index.js",[],["39","40"],"C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\WhatWeOffer.js",[],"C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\Charts.js",["41"],"import React, { useState, useEffect   }  from 'react';\r\nimport axios from 'axios';\r\nimport '../index.css';\r\nimport { VictoryLine } from \"victory\";\r\n\r\nfunction ChartsJS(props) {\r\n  const [cryptoData, setCryptoData] = useState();\r\n  useEffect(() => {\r\n    makeChart(props.cryptoName);\r\n  }, []);\r\n\r\n  let cryptoArray = [];\r\n\r\n  const makeChart = async (cryptoName) => {\r\n      let cryptoResponse = await axios.get(`https://braden-crypto-service.herokuapp.com/api/cryptoMarketChart/${cryptoName}/usd/30`).then((response) => {return response.data});\r\n\r\n      for(let i = 0; i < cryptoResponse.length; i++){\r\n        cryptoArray.push({'x': i + 1, 'y': cryptoResponse[i][1]});\r\n      }\r\n\r\n      setCryptoData(cryptoArray)\r\n  }\r\n  \r\n    return(\r\n      <>\r\n        <div style={{height: 100, display: \"flex\", justifyContent: \"flex-end\"}}>\r\n            <VictoryLine\r\n              width={800}\r\n              style={{\r\n                data: { stroke: props.lineColor, strokeWidth: 20 },\r\n                parent: { border: \"0px solid #ccc\", width: 100}\r\n              }}\r\n              data={cryptoData}\r\n            />\r\n        </div>\r\n      </>\r\n    )\r\n    \r\n}\r\n\r\nexport default ChartsJS","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\Footer.js",["42","43"],"import React  from 'react';\r\nimport FooterNPM from 'rc-footer';\r\nimport 'rc-footer/assets/index.css'; // import 'rc-footer/asssets/index.less';\r\n\r\nfunction Footer() {\r\n    return(\r\n        <FooterNPM\r\n        columns={[\r\n          {\r\n            icon: (\r\n              <img src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\" />\r\n            ),\r\n            title: 'Source Code',\r\n            description: '',\r\n            openExternal: true,\r\n            backgroundColor: '#FFFF00',\r\n            items: [{\r\n              title: 'Github Repo',\r\n              url: 'https://github.com/abniksi/crypto-app-ui',\r\n              openExternal: true,\r\n            }]\r\n          },\r\n          {\r\n            icon: (\r\n              <img src=\"https://cdn3.iconfinder.com/data/icons/social-media-circle-flat-1/1024/share-01-01-512.png\" />\r\n            ),\r\n            title: 'My Socials',\r\n            description: '',\r\n            openExternal: true,\r\n            backgroundColor: '#FFFF00',\r\n            items: [{\r\n              title: 'LinkedIn',\r\n              url: 'https://www.linkedin.com/public-profile/in/bradenniksich',\r\n              openExternal: true,\r\n            },\r\n            {\r\n              title: 'Github',\r\n              url: 'https://github.com/abniksi',\r\n              openExternal: true,\r\n            },\r\n            {\r\n              title: 'Twitter',\r\n              url: 'https://twitter.com/bniksich31?lang=en',\r\n              openExternal: true,\r\n            }]\r\n          },\r\n        ]}\r\n        bottom=\"Made with ❤️ by Braden Niksich\"\r\n      />\r\n    )\r\n    \r\n}\r\n\r\nexport default Footer","C:\\Users\\bniks\\Documents\\Dev\\cryptocurrencyApp\\crypto-ui\\src\\components\\CryptoTable.js",["44"],"import React, { useState, useEffect } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport ChartsJS from './Charts';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n    },\r\n    root:{\r\n        fontSize: 20\r\n    }\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        // marginTop: theme.spacing.unit * 3,\r\n        overflowX: 'hide',\r\n      },\r\n      table: {\r\n        minWidth: 340,\r\n      },\r\n      tableCell: {\r\n        paddingRight: 4,\r\n        paddingLeft: 5\r\n      }\r\n});\r\n\r\nexport default function BasicTable(props) {\r\n    const [bitcoinPrice, setBitcoinPrice] = useState();\r\n    const [ethereumPrice, setEthereumPrice] = useState();\r\n    const [tetherPrice, setTetherPrice] = useState();\r\n    const [polkadotPrice, setPolkadotPrice] = useState();\r\n    const [ripplePrice, setRipplePrice] = useState();\r\n    const [cardanoPrice, setCardanoPrice] = useState();\r\n    const [litecoinPrice, setLitecoinPrice] = useState();\r\n    const [bitcoinCashPrice, setBitcoinCashPrice] = useState();\r\n    const [chainlinkPrice, setChainlinkPrice] = useState();\r\n    const [stellarPrice, setStellarPrice] = useState();\r\n\r\n    const [priceChanges, setPriceChanges] = useState([]);\r\n    //Getting all current prices on page load\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await Promise.all([\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/bitcoin'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/ethereum'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/tether'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/polkadot'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/ripple'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/cardano'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/litecoin'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/bitcoin-cash'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/chainlink'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/cryptoPrice/stellar'),\r\n            ]).then(function (responses) {\r\n                // Get a JSON object from each of the responses\r\n                return Promise.all(responses.map(function (response) {\r\n                    return response.json();\r\n                }));\r\n            }).then(function (data) {\r\n                setBitcoinPrice('$' + data[0]);\r\n                setEthereumPrice('$' + data[1]);\r\n                setTetherPrice('$' + data[2]);\r\n                setPolkadotPrice('$' + data[3]);\r\n                setRipplePrice('$' + data[4]);\r\n                setCardanoPrice('$' + data[5]);\r\n                setLitecoinPrice('$' + data[6]);\r\n                setBitcoinCashPrice('$' + data[7]);\r\n                setChainlinkPrice('$' + data[8]);\r\n                setStellarPrice('$' + data[9]);\r\n            }).catch(function (error) {\r\n                // if there's an error, log it\r\n                console.log(error);\r\n            });\r\n        }\r\n\r\n        const getPriceChange = async () => {\r\n            await Promise.all([\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/bitcoin'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/ethereum'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/tether'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/polkadot'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/ripple'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/cardano'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/litecoin'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/bitcoin-cash'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/chainlink'),\r\n                fetch('https://braden-crypto-service.herokuapp.com/api/crypto24HourChange/stellar'),\r\n            ]).then(function (responses) {\r\n                // Get a JSON object from each of the responses\r\n                return Promise.all(responses.map(function (response) {\r\n                    return response.json();\r\n                }));\r\n            }).then(function (data) {\r\n                setPriceChanges(data);\r\n            }).catch(function (error) {\r\n                // if there's an error, log it\r\n                console.log(error);\r\n            });\r\n        }\r\n        fetchData();\r\n        getPriceChange();\r\n    }, [props]);\r\n    \r\n    const createData = (name, url, currentPrice, priceChange, chart) => {\r\n        return { name, url, currentPrice, priceChange, chart };\r\n    }\r\n    \r\n    const cryptoNames = {bitcoin: \"bitcoin\", ethereum: \"ethereum\", tether: \"tether\", polkadot:\"polkadot\", ripple: \"ripple\", cardano: \"cardano\", litecoin: \"litecoin\", bitcoinCash: \"bitcoin-cash\", chainlink: \"chainlink\", stellar: \"stellar\" }\r\n    \r\n    const rows = [\r\n        createData('  Bitcoin BTC', 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png', bitcoinPrice, parseFloat(priceChanges[0]).toFixed(2) + '%', <ChartsJS lineColor={\"#ff9900\"} cryptoName={cryptoNames.bitcoin}/>),\r\n        createData('  Ethereum ETH', 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png', ethereumPrice, parseFloat(priceChanges[1]).toFixed(2) + '%', <ChartsJS lineColor={\"#000000\"} cryptoName={cryptoNames.ethereum}/>),\r\n        createData('  Tether USDT', 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png', tetherPrice, parseFloat(priceChanges[2]).toFixed(2) + '%', <ChartsJS lineColor={\"#26a17b\"} cryptoName={cryptoNames.tether}/>),\r\n        createData('  Polkadot DOT', 'https://s2.coinmarketcap.com/static/img/coins/64x64/6636.png', polkadotPrice, parseFloat(priceChanges[3]).toFixed(2) + '%', <ChartsJS lineColor={\"#e6007a\"} cryptoName={cryptoNames.polkadot}/>),\r\n        createData('  XRP XRP', 'https://s2.coinmarketcap.com/static/img/coins/64x64/52.png', ripplePrice, parseFloat(priceChanges[4]).toFixed(2) + '%', <ChartsJS lineColor={\"#000000\"} cryptoName={cryptoNames.ripple}/>),\r\n        createData('  Cardano ADA', 'https://s2.coinmarketcap.com/static/img/coins/64x64/2010.png', cardanoPrice, parseFloat(priceChanges[5]).toFixed(2) + '%', <ChartsJS lineColor={\"#2a71d0\"} cryptoName={cryptoNames.cardano}/>),\r\n        createData('  Litecoin LTC', 'https://s2.coinmarketcap.com/static/img/coins/64x64/2.png', litecoinPrice, parseFloat(priceChanges[6]).toFixed(2) + '%', <ChartsJS lineColor={\"#00aeff\"} cryptoName={cryptoNames.litecoin}/>),\r\n        createData('  Bitcoin Cash BCH', 'https://s2.coinmarketcap.com/static/img/coins/64x64/1831.png', bitcoinCashPrice,parseFloat(priceChanges[7]).toFixed(2) + '%', <ChartsJS lineColor={\"#8dc351 \"} cryptoName={cryptoNames.bitcoinCash}/>),\r\n        createData('  Chainlink LINK', 'https://s2.coinmarketcap.com/static/img/coins/64x64/1975.png', chainlinkPrice, parseFloat(priceChanges[8]).toFixed(2) + '%', <ChartsJS lineColor={\"#375bd2\"} cryptoName={cryptoNames.chainlink}/>),\r\n        createData('  Stellar XLM', 'https://s2.coinmarketcap.com/static/img/coins/64x64/512.png', stellarPrice, parseFloat(priceChanges[9]).toFixed(2) + '%', <ChartsJS lineColor={\"#333\"} cryptoName={cryptoNames.stellar}/>),\r\n    ];\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <h1 style={{ textAlign: \"center\", padding: 50}}>Popular Crypto</h1>\r\n            <div style={{ width: '100%' }}>\r\n                <TableContainer component={Paper}>\r\n                <Table style={{ margin: 'auto', tableLayout: 'fixed' }} className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                    <StyledTableCell>Name</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">Current Price</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">24 Hour Change</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">30 Day Chart</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                    <StyledTableRow key={row.name}>\r\n                        <StyledTableCell component=\"th\" scope=\"row\">\r\n                            <img style={{height: 36, width: 36}} src={row.url} />\r\n                            {row.name}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"right\">{row.currentPrice}</StyledTableCell>\r\n                        <StyledTableCell align=\"right\" style={{ color: \"#FF0000\" }}>{row.priceChange}</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">{row.chart}</StyledTableCell>\r\n                    </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n            </div>\r\n        </>\r\n  );\r\n}",{"ruleId":"45","severity":1,"message":"46","line":6,"column":8,"nodeType":"47","messageId":"48","endLine":6,"endColumn":16},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":10,"column":6,"nodeType":"55","endLine":10,"endColumn":8,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":11,"column":15,"nodeType":"59","endLine":11,"endColumn":102},{"ruleId":"57","severity":1,"message":"58","line":25,"column":15,"nodeType":"59","endLine":25,"endColumn":119},{"ruleId":"57","severity":1,"message":"58","line":161,"column":29,"nodeType":"59","endLine":161,"endColumn":82},"no-unused-vars","'ChartsJS' is defined but never used.","Identifier","unusedVar","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'makeChart' and 'props.cryptoName'. Either include them or remove the dependency array.","ArrayExpression",["62"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [makeChart, props.cryptoName]",{"range":"65","text":"66"},[289,291],"[makeChart, props.cryptoName]"]